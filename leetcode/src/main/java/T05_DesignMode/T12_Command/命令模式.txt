star法则:

status: 桥梁模式, 其实跟代理模式有那抹一点类似, 都是找一个中间人, 来执行命令
  工作中我们都会有这种情况: 一个团队, 美工团队,后端团队, 需求团队, 还有甲方爸爸,
  甲方提出需求, 就是命令, 而项目经理就是那个中间人, 去调研这个工作是美工的任务, 还是后端的任务,
  把客户的命令经过转化, 传达给各个部分的人, 让手下的人进行工作就okl


task:
    //第一版的简单模式, 不算是桥梁模式.
    Group 团队超类,
        //第一版的实现类
        CodeGroup
        FaceGroup
        RequirementGroup

    //第二版的模式, 不算是桥梁模式.
    Group --团队超类,
    Command --命令超类,
        AddRequirementCommand --增加一个需求命令
        DeletePageCommand --删除一个页面的命令
    Invoke 接受命令的人,
    Client 实例化出接受命令的人, 去进行接受一个命令, 并执行


action:
    xxxx

result:
    最终形成一个有序的结构, 接受任务, 传给执行该命令的人, 执行....